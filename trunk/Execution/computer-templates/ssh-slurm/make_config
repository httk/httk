#!/bin/bash

DIRNAME=$(dirname "$0")
SCRIPT_PATH=$(cd "$DIRNAME"; pwd -P)
if [ -e "$SCRIPT_PATH/config" ]; then
    . "$SCRIPT_PATH/config"
fi

QUEUE="$1"
shift 1
. "$SCRIPT_PATH/config"
if [ -e "$SCRIPT_PATH/config.$QUEUE" ]; then
    . "$SCRIPT_PATH/config.$QUEUE"
fi

if [ -z "$QUEUE" -o "$QUEUE" == "default" ]; then
    OUTCONFIG="config"
else
    OUTCONFIG="config.$QUEUE"
fi

function readdata {
    DEFAULT=$1
    read DATA
    if [ -n "$DATA" ]; then
	echo "$DATA"
    else
	echo "$DEFAULT"
    fi
}

echo "Remote hostname: [$REMOTE_HOST]"
REMOTE_HOST=$(readdata "$REMOTE_HOST")

echo "Username: [$USERNAME]"
USERNAME=$(readdata "$USERNAME")

echo "Directory on remote host to keep runs and httk files: [$REMOTE_HTTK_DIR]"
REMOTE_HTTK_DIR=$(readdata "$REMOTE_HTTK_DIR")

if [ "${REMOTE_HTTK_DIR:0:1}" = "/" -o "${REMOTE_HTTK_DIR:0:1}" = "~" ]; then
    REMOTE_HTTK_DIR="$REMOTE_HTTK_DIR"
else
    REMOTE_HTTK_DIR="~/$REMOTE_HTTK_DIR"
fi

echo "Command to run vasp: [$VASP_COMMAND]"
VASP_COMMAND=$(readdata "$VASP_COMMAND")

echo "Vasp pseudopotential path (should be an absolute path, starting with / ): [$VASP_PSEUDO_PATH]"
VASP_PSEUDO_PATH=$(readdata "$VASP_PSEUDO_PATH")

if [ "${VASP_PSEUDO_PATH:0:1}" = "/" -o "${VASP_PSEUDO_PATH:0:1}" = "~" ]; then
    VASP_PSEUDO_PATH="$VASP_PSEUDO_PATH"
else
    VASP_PSEUDO_PATH="~/$VASP_PSEUDO_PATH"
fi

echo "Slurm project to submit jobs to: [$SLURM_PROJECT]"
SLURM_PROJECT=$(readdata "$SLURM_PROJECT")

echo "Slurm queue to submit jobs to [$SLURM_QUEUE]"
SLURM_QUEUE=$(readdata "$SLURM_QUEUE")

echo "Slurm job timeout [$SLURM_TIMEOUT]"
SLURM_TIMEOUT=$(readdata "$SLURM_TIMEOUT")

echo "Taksmanager timeout max time per task in seconds: [$TASKMGR_JOB_TIMEOUT]"
TASKMGR_JOB_TIMEOUT=$(readdata "$TASKMGR_JOB_TIMEOUT")

cat - > "$OUTCONFIG" <<EOF
REMOTE_HOST="$REMOTE_HOST"
REMOTE_HTTK_DIR="$REMOTE_HTTK_DIR"
USERNAME="$USERNAME"
VASP_COMMAND="$VASP_COMMAND"
VASP_PSEUDO_PATH="$VASP_PSEUDO_PATH"
SLURM_PROJECT="$SLURM_PROJECT"
SLURM_QUEUE="$SLURM_QUEUE"
SLURM_NODES="1"
SLURM_TIMEOUT="$SLURM_TIMEOUT"
TASKMGR_JOB_TIMEOUT="$TASKMGR_JOB_TIMEOUT"
EOF
